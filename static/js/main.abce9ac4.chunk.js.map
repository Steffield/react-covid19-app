{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","API/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","index.js","components/CountryPicker/CountryPicker.module.css","App.module.css","components/Chart/Chart.module.css","Images/covidIMG.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","variant","gutterBottom","start","end","value","duration","separator","color","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","select","onChange","e","target","defaultValue","i","key","App","state","fetchedData","setState","this","wrapper","image","src","coronaIMG","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.abce9ac4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from \"react\";\nimport { Card, CardContent, Typography, Grid} from \"@material-ui/core\";\nimport styles from \"./Cards.module.css\";\nimport CountUp from \"react-countup\";\nimport cx from \"classnames\";\n\nconst Cards =({ data: {confirmed, recovered, deaths, lastUpdate }}) => {\n  if(!confirmed) {\n    return \"Loading...\"\n  }\n\n  return(\n    <div className={ styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n          <CardContent>\n            <Typography variant=\"h4\" gutterBottom>Infected</Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={ confirmed.value }\n                duration={2.5}\n                separator=\",\"\n              />\n              </Typography>\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n            <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>          <CardContent>\n            <Typography variant=\"h4\" gutterBottom>Recovered</Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={ recovered.value }\n                duration={2.5}\n                separator=\",\"\n              />\n              </Typography>\n            <Typography color=\"textSecondary\">{ new Date(lastUpdate).toDateString()}</Typography>\n            <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>          <CardContent>\n            <Typography variant=\"h4\" gutterBottom>Deaths</Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={ deaths.value }\n                duration={2.5}\n                separator=\",\"\n              />\n              </Typography>\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n            <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    \n     </div>\n  )\n}\n\nexport default Cards;","import axios from \"axios\";\n\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n\n  if(country){\n    changeableUrl =`${url}/countries/${country}`\n  }\n  try {\n    const { data: { confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeableUrl);\n\n    const modifiedData = {\n      confirmed,\n      recovered,\n      deaths,\n      lastUpdate\n    }\n    return modifiedData;\n  } catch (error){\n    console.log(error);\n  }\n}\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate\n    }));\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const fetchCountries = async () => {\n  try {\n    const { data : {countries }} = await axios.get(`${url}/countries`);\n      return countries.map((country) => country.name)\n    }\n    catch (error) {\n    console.log(error);\n  }\n}","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../API\"\nimport {Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\n\n\nconst Chart =({ data: {confirmed, recovered, deaths}, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n\n  useEffect(()=> {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    }\n    fetchAPI()\n  },[]);\n\n  const lineChart =(\n    dailyData.length\n    ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [{\n          data: dailyData.map(({ confirmed })=> confirmed),\n          label: \"Infected\",\n          borderColor: \"rgba(104,143,175,.5)\",\n          fill: true\n        }, {\n          data: dailyData.map(({ deaths })=> deaths),\n          label: \"Deaths\",\n          borderColor: \"rgba(255,0,0,.5)\",\n          backgroundColor: \"rgba(255, 0,0,.5)\",\n          fill: true\n        }],\n      }}\n    />) : null\n  )\n\n  const barChart = (\n    confirmed\n    ? (\n      <Bar \n        data={{\n          labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n          datasets: [{\n            label: \"People\", \n            backgroundColor:[\n              \"rgba(104,143,175,.5)\",\n              \"#43d4c1\",\n              \"rgba(255,0,0,.5)\",\n            ],\n            data: [confirmed.value, recovered.value, deaths.value]\n          }]\n        }}\n        options={{\n          legend: { display: false},\n          title: { display: true, text: `Current state in ${country}`},\n        }}\n        />\n      ): null\n  );\n\n  return(\n    <div className={ styles.container }>\n      {country ? barChart: lineChart}\n    </div>\n  )\n}\n\nexport default Chart;","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\nimport { fetchCountries } from \"../../API\";\nimport styles from \"./CountryPicker.module.css\";\n\nconst CountryPicker =({ handleCountryChange }) => {\n  const [fetchedCountries, setFetchedCountries]= useState([]);\n  useEffect(()=>{\n    const fetchAPI = async() => {\n      setFetchedCountries(await fetchCountries());\n\n    }\n    fetchAPI();\n  }, [setFetchedCountries]);\n\n  console.log()\n  return(\n    <FormControl className ={ styles.formControl}>\n      <NativeSelect className={styles.select} onChange={(e) => handleCountryChange(e.target.value)} defaultValue=\"\" >\n        <option value=\"\">Global</option>\n        {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n      </NativeSelect>\n    </FormControl>\n  )\n}\n\nexport default CountryPicker;","import React, {Component} from \"react\";\nimport { Cards, Chart, CountryPicker} from \"./components\";\nimport styles from \"./App.module.css\"\nimport { fetchData } from \"./API\";\nimport coronaIMG from \"./Images/covidIMG.png\"\n\n\nclass App extends Component {\n  state = {\n    data: {},\n    country: '',\n  }\n\n  async componentDidMount(){\n    const fetchedData = await fetchData();\n\n    this.setState({ data: fetchedData })\n  }\n\n  handleCountryChange = async(country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country})\n  }\n  render() {\n    const { data, country }= this.state;\n    return (\n      <div className={styles.wrapper}>\n        <img className={styles.image} src={coronaIMG} alt=\"Covid-19\" />\n        <Cards data={ data } />\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Chart data={data} country={country}/>\n      </div>\n    )\n  }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n    <App />, document.getElementById(\"root\"));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\",\"select\":\"CountryPicker_select__2BqZV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2Rh_f\",\"image\":\"App_image__3byI1\",\"container\":\"App_container__1MQN3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","module.exports = __webpack_public_path__ + \"static/media/covidIMG.d7265326.png\";"],"sourceRoot":""}